// generated by jsonutils.com
// edited names, added comments and code style aligned
// added properties and methods

using System.Linq;
using System.Text;
using Newtonsoft.Json;

namespace IucnRedList.Model
{
  /// <summary>
  /// Represents IUCN Red List API V3 Species result item
  /// </summary>
  public class Species
  {
    [JsonProperty("taxonid")]
    public int TaxonId { get; set; }

    [JsonProperty("kingdom_name")]
    public string KingdomName { get; set; }

    [JsonProperty("phylum_name")]
    public string PhylumName { get; set; }

    [JsonProperty("class_name")]
    public string ClassName { get; set; }

    [JsonProperty("order_name")]
    public string OrderName { get; set; }

    [JsonProperty("family_name")]
    public string FamilyName { get; set; }

    [JsonProperty("genus_name")]
    public string GenusName { get; set; }

    [JsonProperty("scientific_name")]
    public string ScientificName { get; set; }

    [JsonProperty("infra_rank")]
    public object InfraRank { get; set; }

    [JsonProperty("infra_name")]
    public object InfraName { get; set; }

    [JsonProperty("population")]
    public object Population { get; set; }

    [JsonProperty("category")]
    public string Category { get; set; }

    [JsonIgnore]
    public string ConservationMeasures { get; private set; }

    [JsonIgnore]
    public bool ConservationMeasuresSet { get; private set; }

    /// <summary>
    /// Processes ConservationMeasuresResponse into concatenated string of Conservation Measure titles.
    /// </summary>
    /// <remarks>
    /// Reading Conservation Measures as string and using custom Json converter, ConservationMeasure type can be serialized directly into ConservationMeasures 
    /// -> deserializing multiple JSONs into same class
    /// </remarks>
    public void ProcessConservationMeasures(ConservationMeasuresResponse conservationMeasures)
    {
      if (conservationMeasures != null && conservationMeasures.Result != null)
      {
        ConservationMeasuresSet = true;

        ConservationMeasures = string.Join(";", conservationMeasures.Result.Select(r => r.Title).ToArray());
      }
    }

    public string GetDisplayInfo()
    {
      StringBuilder sb = new StringBuilder();
      sb.AppendFormat("{0} - {1} - {2}", TaxonId, GenusName, ScientificName);
      sb.AppendLine();
      sb.AppendFormat("{0} - {1} - {2} - {3} - {4}", KingdomName, PhylumName, ClassName, OrderName, FamilyName);
      sb.AppendLine();
      sb.AppendLine(Category);
      if (!string.IsNullOrEmpty(ConservationMeasures))
      {
        sb.AppendLine(ConservationMeasures);
      }
      sb.AppendLine("-----");

      return sb.ToString();
    }
  }
}
